{"version":3,"sources":["logo.svg","constants/ActionUsers.js","reducers/Users.js","reducers/index.js","components/Header.js","components/Footer.js","components/Users.js","actions/UsersAction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","REQUEST_GET_USERS","REQUEST_GET_USERS_SUCCESS","REQUEST_GET_USERS_FAILED","initialState","fromJS","loading","message","data","Users","state","arguments","length","undefined","action","type","set","combineReducers","Header","react_default","a","createElement","className","alt","src","logo","Component","Footer","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFetchUsers","obj","setTimeout","onFetchUsersSuccess","id","username","get","map","value","index","key","connect","dispatch","fetchUserRequestSuccess","onFetchUsersFailed","fetchUserRequestFailed","App","components_Header","components_Users","components_Footer","Boolean","window","location","hostname","match","store","createStore","reducer","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b97056f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const REQUEST_GET_USERS = 'REQUEST_GET_USERS';\nexport const REQUEST_GET_USERS_SUCCESS = 'REQUEST_GET_USERS_SUCCESS';\nexport const REQUEST_GET_USERS_FAILED = 'REQUEST_GET_USERS_FAIELD';\n","\nimport { REQUEST_GET_USERS, REQUEST_GET_USERS_SUCCESS, REQUEST_GET_USERS_FAILED } from '../constants/ActionUsers'\nimport { fromJS } from 'immutable';\n\nexport const initialState = fromJS({\n    loading:false,\n    message:'',\n    data:[]\n});\nfunction Users(state = initialState, action) {\n    switch (action.type) {\n        case REQUEST_GET_USERS:\n            return state.set('loading',true).set('message','').set('data',[]);\n        case REQUEST_GET_USERS_SUCCESS:\n            return state.set('loading',false).set('message','').set('data',action.data);\n        case REQUEST_GET_USERS_FAILED:\n            return state.set('loading',false).set('message',action.message).set('data',[]);\n        default:\n            return state\n    }\n}\n\nexport default Users;\n","import { combineReducers } from 'redux'\nimport Users from './Users';\n\nexport default combineReducers({\n    Users\n})\n","import logo from './../logo.svg';\nimport React, { Component } from 'react';\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"App-header\">\n                <img alt=\"logo\" className=\"App-logo\" src={logo}/>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className=\"App-link\">\n                <p>&copy Tiepnd</p>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {fetchUserRequest,fetchUserRequestSuccess,fetchUserRequestFailed} from '../actions/UsersAction';\nclass Users extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount(){\n        this.props.onFetchUsers();\n        let obj = this.props;\n        setTimeout(function () {\n           obj.onFetchUsersSuccess([{id:1,username:'Dep trai'},{id:2,username:'Ga lang'},{id:3,username:'Nhieu tien'},{id:3,username:'Qua hoan hao'}]);\n        },3000);\n    }\n    render() {\n        const { Users } = this.props;\n        return (\n            <div className=\"App-Users\">\n                {Users.get('loading') === true?\"Loading\":\"TiepNd\"}\n                {Users.get('data')?Users.get('data').map((value,index) => {\n                    return (\n                        <div key={index}>\n                            <p>Uu diem {value.id} : {value.username}</p>\n                        </div>\n                    );\n                }):null}\n            </div>\n        );\n    }\n}\n\nexport function mapDispatchToProps(dispatch) {\n    return {\n        onFetchUsers: () => dispatch(fetchUserRequest()),\n        onFetchUsersSuccess: (data) => dispatch(fetchUserRequestSuccess(data)),\n        onFetchUsersFailed: (message) => dispatch(fetchUserRequestFailed(message))\n    };\n}\nconst mapStateToProps = (state) => ({\n    Users: state.Users\n});\nexport default connect(mapStateToProps,mapDispatchToProps)(Users);\n","import {REQUEST_GET_USERS,REQUEST_GET_USERS_FAILED,REQUEST_GET_USERS_SUCCESS} from '../constants/ActionUsers'\nexport function fetchUserRequest() {\n    return {\n        type: REQUEST_GET_USERS,\n    };\n}\n\nexport function fetchUserRequestSuccess(data) {\n    return {\n        type: REQUEST_GET_USERS_SUCCESS,\n        data\n    };\n}\n\nexport function fetchUserRequestFailed(message) {\n    return {\n        type: REQUEST_GET_USERS_SUCCESS,\n        message\n    };\n}\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Users from './components/Users';\nimport './App.css';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Users/>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n    reducer\n);\nReactDOM.render( <Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}